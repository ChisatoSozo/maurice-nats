# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class InsertSong(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = InsertSong()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsInsertSong(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # InsertSong
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # InsertSong
    def Index(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # InsertSong
    def Song(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Song import Song
            obj = Song()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def InsertSongStart(builder):
    builder.StartObject(2)

def Start(builder):
    InsertSongStart(builder)

def InsertSongAddIndex(builder, index):
    builder.PrependInt32Slot(0, index, 0)

def AddIndex(builder, index):
    InsertSongAddIndex(builder, index)

def InsertSongAddSong(builder, song):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(song), 0)

def AddSong(builder, song):
    InsertSongAddSong(builder, song)

def InsertSongEnd(builder):
    return builder.EndObject()

def End(builder):
    return InsertSongEnd(builder)
